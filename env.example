# .env.example
# Server Configuration
NODE_ENV=development
PORT=8080
HOST=0.0.0.0

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=recording_orchestrator
DB_USER=postgres
DB_PASSWORD=password
DB_SSL=false
DB_POOL_MIN=2
DB_POOL_MAX=10

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Authentication (Optional - removed for simplified deployment)
# JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
# TOKEN_EXPIRY=24h

# CORS
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# Auto-scaling Configuration (Monitoring only - no auto-deployment)
AUTO_SCALING_ENABLED=false
MIN_NODES=2
MAX_NODES=10
SCALE_UP_THRESHOLD=80
SCALE_DOWN_THRESHOLD=30
COOLDOWN_PERIOD=300

# Monitoring
HEALTH_CHECK_INTERVAL=30000
NODE_TIMEOUT_MS=60000
MAX_RETRIES=3
DETAILED_LOGGING=true
METRICS_INTERVAL=15000

# Recording Configuration
OUTPUT_DIR=/recordings
CLEANUP_DAYS=30
MAX_CONCURRENT_PER_NODE=6

# Cloud Provider (not used for auto-deployment, kept for reference)
# CLOUD_PROVIDER=local

# Callbacks
ORCHESTRATOR_URL=http://localhost:8080
ORCHESTRATOR_CALLBACK_URL=http://localhost:8080

# Alerts (for manual scaling notifications)
ALERT_WEBHOOK_URL=
ALERT_EMAILS=admin@yourcompany.com
SLACK_CHANNEL=#ops-alerts

# Logging
LOG_LEVEL=info

# Manual Scaling Notifications
ENABLE_SCALING_ALERTS=true
SCALING_ALERT_COOLDOWN=300